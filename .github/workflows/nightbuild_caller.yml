# This is a basic workflow to help you get started with Actions

name: BuildRelease_caller

env:
  JenkinsUrl: http://jenkins1.sherb.vantrix.com:8080

# Controls when the workflow will run 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      gitRev:
        description: 'git rev or tag to build. default: head of current branch'
        required: false
        default: ''
      debVersion:
        description: 'Version tag'
        required: false
        default: ''
      architecture:
        description: 'Architecture'
        required: true
        default: 'X64' 
        type: choice
        options:
        - X64
        - ARM64
      buildType:
        description: 'Build Type'
        required: true
        default: 'Clean Build' 
        type: choice
        options:
        - Clean Build
        - Rebuild
      # doAptGet: 
      #   description: 'Apt get'
      #   type: boolean
      #   default: true
      # doCheckout: 
      #   description: 'code Checkout'
      #   type: boolean
      #   default: true
      # doBuild: 
      #   description: 'Build'
      #   type: boolean
      #   default: true
      buildOptions:
        description: 'option to pass to buildall script (ex: "--build ltrx")'
        required: false
        default: '-v'
      doDebian: 
        description: 'Generate Debian'
        type: boolean
        default: true
      doDebNexusUpload: 
        description: 'Send the .deb to Nexus'
        type: boolean
        default: true
      doDebJenkinsUpload: 
        description: 'Send the .deb to Jenkins'
        type: boolean
        default: true
      doJenkinsRegression: 
        description: 'Start regression on Jenkins'
        type: boolean
        default: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  set_env:
    # name: build caller
    runs-on: self-hosted

    steps:
    - name: HERE1
      run: echo "HERE1"
      
    - name: HERE2
      run: |
          echo "HERE2"
          echo "test_value=ABC" >> $GITHUB_OUTPUT
          #echo "::set-output name=test_value2::\"ABCDEF\""
          echo "test_from_githubenv=[1234556788, sfa]" >> $GITHUB_ENV
          echo "running_on=[\"self-hosted\",  \"ARM64\"]" >> $GITHUB_ENV
          echo "showing env.test_from_githubenv ${{ env.test_from_githubenv }}"
    outputs:
      config_path: TEST_12345
      test_from_output: ${{ env.test_from_githubenv }}
      running_on: ${{ env.running_on }}
      runs_on: '[ "self-hosted", "${{ github.event.inputs.architecture }}"]'

  # show_env_arm:
  #   runs-on: ${{ fromJson(needs.set_env.outputs.runs_on) }}
  #   #runs-on: [self-hosted,  ARM64]
  #   needs: [set_env]
  #   steps:
  #   - name: Show ENV ARM
  #     run: | 
  #       echo "SHow env ARM64 ${{ needs.set_env.outputs.config_path }}"
  #       echo "SHow needs.set_env.outputs.test_value=${{ needs.set_env.outputs.test_value }}"
  #       echo "SHow needs.set_env.outputs.val_test_value=${{ needs.set_env.outputs.val_test_value }}"
  #       echo "SHow needs.set_env.outputs=${{ needs.set_env.outputs }}"
  #       echo "Show env.test_from_githubenv= ${{ env.test_from_githubenv }}"
  #       echo 'env = ${{ toJSON(env) }}'
  #       echo 'needs = ${{ toJSON(needs) }}'


  # show_env:
  #   runs-on: [self-hosted,  X64]
  #   needs: [set_env]
  #   steps:
  #   - name: Show ENV X64
  #     run: echo "SHow env X64 ${{ needs.set_env.outputs.config_path }}"

  # show1_env:
  #   runs-on: self-hosted
  #   needs: [set_env]
  #   if: ${{ github.event_name == 'schedule' }}
  #   steps:
  #   - name: Show ENV SCHEDULE
  #     run: echo "SHow env ${{ needs.set_env.outputs.config_path }}"

  NightBuildARM64:
    needs: [set_env]
    name: NightBuildARM64
    #if: ${{ github.event_name == 'schedule' }}
    # job calling other workflow can't use steps in them
    uses: ./.github/workflows/nightbuild_common.yml
    with:
      config_path: ${{ needs.set_env.outputs.config_path }}
      architecture: ARM64
      runner_label: '[ "self-hosted", "ARM64" ]'
      #architecture: "[self-hosted,  ARM64]"
      #env: ${{ github.event.inputs.environment }}
      #secrets: inherit

  NightBuildX64:
    needs: [set_env]
    name: NightBuildX64
    #if: ${{ github.event_name == 'schedule' }}
    # job calling other workflow can't use steps in them
    uses: ./.github/workflows/nightbuild_common.yml
    with:
      config_path: ${{ needs.set_env.outputs.config_path }}
      architecture: X64
      runner_label: '[ "self-hosted", "X64" ]'
      #architecture: "[self-hosted,  ARM64]"
      #env: ${{ github.event.inputs.environment }}
      #secrets: inherit

  # UserBuild:
  #   needs: [set_env]
  #   name: ALLO
  #   if: ${{ github.event_name != 'schedule' }}
  #   # job calling other workflow can't use steps in them
  #   uses: ./.github/workflows/nightbuild_common.yml
  #   with:
  #     config_path: ${{ needs.set_env.outputs.config_path }}
  #     architecture: ${{ github.event.inputs.architecture }}
  #     #architecture: "[self-hosted,  ARM64]"
  #     #env: ${{ github.event.inputs.environment }}
  #     #secrets: inherit



