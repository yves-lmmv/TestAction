# This is a basic workflow to help you get started with Actions

name: BuildRelease

env:
  JenkinsUrl: http://jenkins1.sherb.vantrix.com:8080

# Controls when the workflow will run 
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # NOTE : The time is badly set somewhere as it is NOT UTC.
    # This cron run at midnight with 0 4....
    #0  0,12 *  *  *
    - cron:  '0 4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      gitRev:
        description: 'git rev or tag to build. default: head of current branch'
        required: false
        default: ''
      debVersion:
        description: 'Version for .deb (ex YYYY.MM.DD), if empty : nightbuild autogenerated name. NOTE : for official release, put the same name here than the tag'
        required: false
        default: ''
      doAptGet: 
        description: 'Apt get'
        type: boolean
        default: 'true'
      doCheckout: 
        description: 'code Checkout'
        type: boolean
        default: 'true'
      doBuild: 
        description: 'Build'
        type: boolean
        default: 'true'
      buildOptions:
        description: 'option to pass to buildall script (ex: "--build ltrx")'
        required: false
        default: '-v'
      doDebian: 
        description: 'Generate Debian'
        type: boolean
        default: 'true'
      doDebNexusUpload: 
        description: 'Send the .deb to Nexus'
        type: boolean
        default: 'true'
      doDebJenkinsUpload: 
        description: 'Send the .deb to Jenkins'
        type: boolean
        default: 'true'
      doJenkinsRegression: 
        description: 'Start regression on Jenkins'
        type: boolean
        default: 'true'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  call-workflow-passing-data:
    uses: nightbuild_common.yml@main
    secrets: inherit


  # build:
  #   # The type of runner that the job will run on
  #   #runs-on: ubuntu-latest
  #   runs-on: self-hosted
  #   timeout-minutes: 140

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # When a schedule (cron) run the action, it didn't have access to the various variable
  #     # defined above. ex : ${{ github.event.inputs.doCheckout }}
  #     # so here we export those variable to a new name with the user value if set or a default
  #     # value if not.
  #     # The variable will be accessible under ${{ env.VAR_NAME }}"
  #     # IMPORTANT : ALL default are set to true like the list above
  #     # the other string variable are empty so this is not a problem
  #     - name: Export user input default
  #       id: name
  #       run: |
  #         echo "doAptGet=${{ github.event.inputs.doAptGet || true }}" >> $GITHUB_ENV
  #         echo "doCheckout=${{ github.event.inputs.doCheckout || true }}" >> $GITHUB_ENV
  #         echo "doBuild=${{ github.event.inputs.doBuild || true }}" >> $GITHUB_ENV
  #         echo "doDebian=${{ github.event.inputs.doDebian || true }}" >> $GITHUB_ENV
  #         echo "doDebJenkinsUpload=${{ github.event.inputs.doDebJenkinsUpload || true }}" >> $GITHUB_ENV
  #         echo "doJenkinsRegression=${{ github.event.inputs.doJenkinsRegression || true }}" >> $GITHUB_ENV
  #         echo "doDebNexusUpload=${{ github.event.inputs.doDebNexusUpload || true }}" >> $GITHUB_ENV
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      

