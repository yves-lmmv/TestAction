# This is a basic workflow to help you get started with Actions

name: BuildRelease_caller

env:
  JenkinsUrl: http://jenkins1.sherb.vantrix.com:8080

# Controls when the workflow will run 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    secrets:
        BOT_JENKINS_API_TOKEN:
        description: 'A token passed from the caller workflow'
        required: true
    inputs:
      gitRev:
        description: 'git rev or tag to build. default: head of current branch'
        required: false
        default: ''
      debVersion:
        description: 'Version tag'
        required: false
        default: ''
      architecture:
        description: 'Architecture'
        required: true
        default: 'X64' 
        type: choice
        options:
        - X64
        - ARM64
      buildType:
        # Code in set_env need to be aligned with the options name
        description: 'Build Type'
        required: true
        default: 'Checkout, Clean, Build' 
        type: choice
        options:
        - 'Checkout, Clean, Build'
        - 'Clean, Build'
        - 'Build'
        - 'Nothing'
      postBuild:
        # Code in set_env need to be aligned with the options name
        description: 'Post Build action. Debian/tgz generation, Nexus upload, Jenkins upload, Jenkins testing'
        required: true
        default: 'Debian, Nexus, Jenkins, Tests' 
        type: choice
        options:
        - 'Debian, Nexus, Jenkins, Tests'
        - 'Debian, Nexus, Jenkins'
        - 'Debian, Nexus'
        - 'Debian'
        - 'Nothing'

      buildOptions:
        description: 'option to pass to buildall script (ex: "--build ltrx")'
        required: false
        default: '-v'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  set_env:
    if: ${{ github.event_name != 'schedule' }}
    name: 'setup Env for user triggered build'
    runs-on: self-hosted
    steps:
  
    - name: Setup Env
      run: |
          echo "Creating proper flags based on user choice"
          doAptGet='true'
          doCheckout='true'
          doClean='true'
          doBuild='true'
          doDebian='true'
          doDebNexusUpload='true'
          doTgzNexusUpload='false'
          doDebJenkinsUpload='true'
          doJenkinsRegression='true'
          gitRev="${{ github.event.inputs.gitRev }}"
          debVersion="${{ github.event.inputs.debVersion }}"
          buildOptions="${{ github.event.inputs.buildOptions }}"
          pkgOptions=""
          buildType="${{ github.event.inputs.buildType }}"
          postBuild="${{ github.event.inputs.postBuild }}"

          echo "Parsing buildType option"
          if [[ "${buildType}" = "Checkout, Clean, Build" ]]; then
            echo "Checkout, Clean, Build..."
          elif [[ "${buildType}" = "Clean, Build" ]]; then
            echo "Clean, Build..."
            doAptGet='false'
            doCheckout='false'
          elif [[ "${buildType}" = "Build" ]]; then
            echo "Build..."
            doAptGet='false'
            doCheckout='false'
            doClean='false'
          elif [[ "${buildType}" = "Nothing" ]]; then
            echo "Nothing..."
            doAptGet='false'
            doCheckout='false'
            doClean='false'
            doBuild='false'          
          else
            echo "buildType Parser not aligned with options name"
            return 1
          fi

          echo "Parsing postBuild option"
          if [[ "${postBuild}" = "Debian, Nexus, Jenkins, Tests" ]]; then
            echo "Debian, Nexus, Jenkins, Tests..."
          elif [[ "${postBuild}" = "Debian, Nexus, Jenkins" ]]; then
            echo "Debian, Nexus, Jenkins..."
            doJenkinsRegression='false'
          elif [[ "${postBuild}" = "Debian, Nexus" ]]; then
            echo "Debian, Nexus..."
            doDebJenkinsUpload='false'
            doJenkinsRegression='false'
          elif [[ "${postBuild}" = "Debian" ]]; then
            echo "Debian..."
            doDebJenkinsUpload='false'
            doJenkinsRegression='false'
            doDebNexusUpload='false'            
          elif [[ "${postBuild}" = "Nothing" ]]; then
            echo "Nothing..."
            doDebian='false'
            doDebJenkinsUpload='false'
            doJenkinsRegression='false'
            doDebNexusUpload='false' 
          else
            echo "postBuild Parser not aligned with options name"
            return 1
          fi
          
          if [[ "${{ github.event.inputs.architecture }}" = "ARM64" ]]; then
            echo "Settings specific build and package option for ARM."
            buildOptions="${buildOptions} --strip --buildtype minsize"
            pkgOptions="--tgz --tgz-add-system-libs"
          fi

          echo "gitRev=${gitRev}"             >> $GITHUB_ENV
          echo "debVersion=${debVersion}"     >> $GITHUB_ENV
          echo "buildOptions=${buildOptions}" >> $GITHUB_ENV
          echo "pkgOptions=${pkgOptions}"     >> $GITHUB_ENV
          echo "doAptGet=${doAptGet}"         >> $GITHUB_ENV
          echo "doCheckout=${doCheckout}"     >> $GITHUB_ENV
          echo "doClean=${doClean}"           >> $GITHUB_ENV
          echo "doBuild=${doBuild}"           >> $GITHUB_ENV
          echo "doDebian=${doDebian}"         >> $GITHUB_ENV
          echo "doDebNexusUpload=${doDebNexusUpload}"       >> $GITHUB_ENV
          echo "doTgzNexusUpload=${doTgzNexusUpload}"       >> $GITHUB_ENV
          echo "doDebJenkinsUpload=${doDebJenkinsUpload}"   >> $GITHUB_ENV
          echo "doJenkinsRegression=${doJenkinsRegression}" >> $GITHUB_ENV
    outputs:
      runs_on:      '[ "self-hosted", "${{ github.event.inputs.architecture }}"]'
      gitRev:       ${{ env.gitRev }}
      debVersion:   ${{ env.debVersion }}
      buildOptions: ${{ env.buildOptions }}
      pkgOptions:   ${{ env.pkgOptions }}
      doAptGet:     ${{ env.doAptGet }}
      doCheckout:   ${{ env.doCheckout }}
      doClean:      ${{ env.doClean }}
      doBuild:      ${{ env.doBuild }}
      doDebian:     ${{ env.doDebian }}
      doDebNexusUpload:    ${{ env.doDebNexusUpload }}
      doTgzNexusUpload:    ${{ env.doTgzNexusUpload }}
      doDebJenkinsUpload:  ${{ env.doDebJenkinsUpload }}
      doJenkinsRegression: ${{ env.doJenkinsRegression }}

  # This is the actual job launcher for User triggered build
  UserBuild:
    needs: [set_env]
    name: User Trigger Build
    if: ${{ github.event_name != 'schedule' }}
    # job calling other workflow can't use steps in them
    uses: ./.github/workflows/nightbuild_common.yml
    with:
      architecture:        ${{ github.event.inputs.architecture }}
      runnerLabel:         ${{ needs.set_env.outputs.runs_on }}
      doAptGet:            ${{ fromJson(needs.set_env.outputs.doAptGet) }}
      doCheckout:          ${{ fromJson(needs.set_env.outputs.doCheckout) }}
      doClean:             ${{ fromJson(needs.set_env.outputs.doClean) }}
      doBuild:             ${{ fromJson(needs.set_env.outputs.doBuild) }}
      doDebian:            ${{ fromJson(needs.set_env.outputs.doDebian) }}
      doDebNexusUpload:    ${{ fromJson(needs.set_env.outputs.doDebNexusUpload) }}
      doTgzNexusUpload:    ${{ fromJson(needs.set_env.outputs.doTgzNexusUpload) }}
      doDebJenkinsUpload:  ${{ fromJson(needs.set_env.outputs.doDebJenkinsUpload) }}
      doJenkinsRegression: ${{ fromJson(needs.set_env.outputs.doJenkinsRegression) }}
      gitRev:              ${{ needs.set_env.outputs.gitRev }}
      debVersion:          ${{ needs.set_env.outputs.debVersion }}
      buildOptions:        ${{ needs.set_env.outputs.buildOptions }}
      pkgOptions:          ${{ needs.set_env.outputs.pkgOptions }}
    secrets: inherit


  # This is the Nightbuild job for ARM 
  NightBuildARM64:
    name: NightBuildARM64
    if: ${{ github.event_name == 'schedule' }}
    # job calling other workflow can't use steps in them
    uses: ./.github/workflows/nightbuild_common.yml
    with:
      architecture: ARM64
      runnerLabel:  '[ "self-hosted", "ARM64" ]'
      buildOptions: '-v --strip --buildtype minsize'
      pkgOptions:   '--tgz --tgz-add-system-libs'
      doTgzNexusUpload:    true
      doDebJenkinsUpload:  false
      doJenkinsRegression: false
      secrets: inherit

  # This is the Nightbuild job for Intel 
  NightBuildX64:
    name: NightBuildX64
    if: ${{ github.event_name == 'schedule' }}
    # job calling other workflow can't use steps in them
    uses: ./.github/workflows/nightbuild_common.yml
    with:
      architecture: X64
      runnerLabel:  '[ "self-hosted", "X64" ]'
      buildOptions: '-v'
      secrets: inherit





