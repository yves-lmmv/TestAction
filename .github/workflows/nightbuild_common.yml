# This is a basic workflow to help you get started with Actions

name: BuildRelease common

env:
  JenkinsUrl: http://jenkins1.sherb.vantrix.com:8080

# Controls when the workflow will run 
on:
  workflow_call:
    inputs:
      # pass in environment through manual trigger, if not passed in, default to 'dev'
      env:
        required: true
        type: string
        default: 'dev'
      config_path: 
        required: true
        type: string
        default: 'dev'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  #reusable_workflow_job:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    timeout-minutes: 140

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # When a schedule (cron) run the action, it didn't have access to the various variable
      # defined above. ex : ${{ github.event.inputs.doCheckout }}
      # so here we export those variable to a new name with the user value if set or a default
      # value if not.
      # The variable will be accessible under ${{ env.VAR_NAME }}"
      # IMPORTANT : ALL default are set to true like the list above
      # the other string variable are empty so this is not a problem
      - name: Export user input default
        # with:
        #   configuration-path: ${{ inputs.config-path }}
        id: name
        run: |
          echo "GITHUB_ENV=$GITHUB_ENV"
          ls -l $GITHUB_ENV
          cat $GITHUB_ENV
          echo "configuration-path=${{ inputs.config_path }}"
          # echo "doAptGet=${{ github.event.inputs.doAptGet || true }}" >> $GITHUB_ENV
          # echo "doCheckout=${{ github.event.inputs.doCheckout || true }}" >> $GITHUB_ENV
          # echo "doBuild=${{ github.event.inputs.doBuild || true }}" >> $GITHUB_ENV
          # echo "doDebian=${{ github.event.inputs.doDebian || true }}" >> $GITHUB_ENV
          # echo "doDebJenkinsUpload=${{ github.event.inputs.doDebJenkinsUpload || true }}" >> $GITHUB_ENV
          # echo "doJenkinsRegression=${{ github.event.inputs.doJenkinsRegression || true }}" >> $GITHUB_ENV
          # echo "doDebNexusUpload=${{ github.event.inputs.doDebNexusUpload || true }}" >> $GITHUB_ENV
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repo
        run: | 
          if [ "${{ env.doCheckout }}" == "true" ]; then
            echo "checkout"
            # rm Ltrx-ToolsAndDoc -rf
            # git clone --recursive git@github.com:likeMindedLabs/Ltrx-ToolsAndDoc.git
            # cd Ltrx-ToolsAndDoc
            # GIT_REV="${{ github.event.inputs.gitRev }}"
            # if [ "${GIT_REV}" != "" ]; then
            #   echo "Checkout and update to rev: ${GIT_REV}"
            #   git checkout "${GIT_REV}"
            #   git submodule update
            #   ## if a rev or tag is specified, this means it is not a nightbuild (HEAD)
            #   ## so we need to set all the meson .wrap file to point to the proper version
            #   ## of all the current submodules
            #   echo "Setting all Meson .wrap to current submodules"
            #   # we skip the step that check if each submodule is up to date vs HEAD.
            #   # we fix all wrap file to the submodule version in the tree
            #   ./scripts/git_check.sh --skip-submodules --fix-wrap
            # fi
          else
            echo "skip checkout"
          fi
      - name: running script setup_ubuntu.sh (apt get package)
        run: |
          if [ "${{ env.doAptGet }}" == "true" ]; then
            # sudo ./Ltrx-ToolsAndDoc/scripts/setup_ubuntu.sh
            echo "scripts/setup_ubuntu.sh (apt get)"
          else
            echo "Skip scripts/setup_ubuntu.sh (apt get)"
          fi
      ## This gitaction didn't seems to work.. lots of error when fetching some submodules. This is why I do it manually above
        # uses: actions/checkout@v2
        # with:
        #   submodules: 'true'
        #   fetch-depth: '0'

      - name: Building LTRX
        run: |
          if [ "${{ env.doBuild }}" == "true" ]; then
            # export OPTBASE_OVERRIDE=/tmp/opt
            # cd Ltrx-ToolsAndDoc
            # BUILD_OPTIONS="${{ github.event.inputs.buildOptions }}"
            # if [ "${BUILD_OPTIONS}" == "-v" ] || [ "${BUILD_OPTIONS}" == "" ]; then
            #   echo "Cleaning all previous build since no options set to build"
            #   rm /tmp/opt -rf
            #   echo "Doing full build from scratch"
            # fi
            # export NEXUS_USER=${{ secrets.REPO_USERNAME }}
            # export NEXUS_PASSWORD=${{ secrets.REPO_PASSWORD }}
            # ./scripts/buildall.sh ${BUILD_OPTIONS}
            echo "Build LTRX"
          else
            echo "skip ALL the build"
          fi
          
      - name: Release .deb LTRX
        run: |
          if [ "${{ env.doDebian }}" == "true" ]; then
            echo "Release .deb"
            # export OPTBASE_OVERRIDE=/tmp/opt
            # cd Ltrx-ToolsAndDoc
            # DEB_NAME="${{ github.event.inputs.debVersion }}"
            # if [ "${DEB_NAME}" == "" ]; then
            #   DEB_NAME=$(./scripts/generate_build_name.sh)
            # fi
            # echo "Cleaning all previous distro/ltrx"
            # rm /tmp/distro/ltrx -rf
            # echo "Building debian version=${DEB_NAME}"
            # ./scripts/release_ltrx_deb.sh --skip-date-check --version "${DEB_NAME}" --distro /tmp/distro/ltrx | tee logs/release_ltrx_deb.log
          else
            echo "Skip Release .deb"
          fi

      - name: Copy .deb LTRX to permanent storage
        run: |
          if [ "${{ env.doDebian }}" == "true" ] && 
          [ "${{ env.doDebNexusUpload }}" == "true" ]; 
          then
            echo "Copy .deb"
            # export OPTBASE_OVERRIDE=/tmp/opt
            # cd Ltrx-ToolsAndDoc
            # DEB_LOCATION=$(grep "dpkg-deb: building" logs/release_ltrx_deb.log  | awk '{ print $6 }' | sed "s/'/ /g" | awk '{ print $1 }')
            # echo "copying ${DEB_LOCATION}"
            # # is this a nightbuild or normal build ?
            # PATH_END="/"
            # if [ "${{ github.event.inputs.debVersion }}" == "" ]; then
            #   PATH_END="/Nightbuild/"
            # fi
            # #https://nexus.vantrix.tv/repository/deb/x86_64/ltrx/${PATH_END}
            # # curl didn't like reading from /tmp
            # cp "${DEB_LOCATION}" .
            # DEB_FILE=$(basename ${DEB_LOCATION})
            # curl --fail -u ${{ secrets.REPO_USERNAME }}:${{ secrets.REPO_PASSWORD }} --upload-file "${DEB_FILE}" "https://nexus.vantrix.tv/repository/raw/dev/apt/ltrx${PATH_END}${DEB_FILE}"
          else
            echo "Skip copy .deb"
          fi

      - name: Copy .deb LTRX Jenkins
        run: |
          if [ "${{ env.doDebian }}" == "true" ] && 
          [ "${{ env.doDebJenkinsUpload }}" == "true" ]; 
          then
            echo "Deb jenkins upload"
            # cd Ltrx-ToolsAndDoc
            # USERPW="bot:${{ secrets.BOT_JENKINS_API_TOKEN }}"
            # DEB_LOCATION=$(grep "dpkg-deb: building" logs/release_ltrx_deb.log  | awk '{ print $6 }' | sed "s/'/ /g" | awk '{ print $1 }')
            # # curl didn't like reading from /tmp
            # cp "${DEB_LOCATION}" .
            # DEB_FILE=$(basename ${DEB_LOCATION})

            # echo "DO debian upload on Jenkins job UploadDebFile for file ${DEB_FILE}"
            # curl -v --silent ${{env.JenkinsUrl}}/job/UploadDebFile/buildWithParameters --user ${USERPW} --form uploadLtrxDeb=@${DEB_FILE} >outputUpload.txt 2>&1
            # grep --quiet "201 Created" outputUpload.txt
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Error uploading .deb to Jenkins. Http response: "
            #   cat outputUpload.txt
            #   exit 1
            # fi

            # # Now we need to wait for the new item in Jenkins queue to be processed
            # # search for the new item created Location in the output response
            # # make sure to remove the carriage return that is part of http header response
            # LOCATION=$(grep Location outputUpload.txt | awk '{print $NF}' | tr -d '\r')
            # echo "${LOCATION}" | grep --quiet http
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Location in Http response invalid"
            #   cat outputUpload.txt
            #   exit 1
            # fi

            # echo "We need to wait for item in Jenkins queue to be processed : ${LOCATION}"
            # ./scripts/jenkins/waitForJob.sh "${LOCATION}" "${USERPW}"
            
          else
            echo "Skip deb jenkins upload"
          fi

      - name: Start Jenkins regression
        run: |
          if [ "${{ env.doDebian }}" == "true" ] && 
             [ "${{ env.doDebJenkinsUpload }}" == "true" ] && 
             [ "${{ env.doJenkinsRegression }}" == "true" ]; 
          then
            echo "Start Jenkins regression"
            # cd Ltrx-ToolsAndDoc
            # USERPW="bot:${{ secrets.BOT_JENKINS_API_TOKEN }}"
            # echo "DO Prepare Jenkins regression"
            # curl -v --silent ${{env.JenkinsUrl}}/job/UpdateLtrxTest/buildWithParameters --user ${USERPW} --data dummy=dummy >outputCreateTest.txt 2>&1
            # grep --quiet "201 Created" outputCreateTest.txt
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Error creating test on Jenkins. Http response: "
            #   cat outputCreateTest.txt
            #   exit 1
            # fi
            
            # # Now we need to wait for the new item in Jenkins queue to be processed
            # # search for the new item created Location in the output response
            # # make sure to remove the carriage return that is part of http header response
            # LOCATION=$(grep Location outputCreateTest.txt | awk '{print $NF}' | tr -d '\r')
            # echo "${LOCATION}" | grep --quiet http
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Location in Http response invalid"
            #   cat outputCreateTest.txt
            #   exit 1
            # fi

            # echo "We need to wait for item in Jenkins queue to be processed : ${LOCATION}"
            # ./scripts/jenkins/waitForJob.sh "${LOCATION}" "${USERPW}"

            # echo "Test suite created in Test_Nightbuild"


            # echo "Launch Jenkins regression. Will wait for it to start (but not to finish)"
            # echo "Go see it at ${{env.JenkinsUrl}}/job/Test_NightBuild"
            # curl -v --silent ${{env.JenkinsUrl}}/job/Test_NightBuild/job/00_Launcher_ALL/build --user ${USERPW} --data dummy=dummy >outputStart.txt 2>&1
            # grep --quiet "201 Created" outputStart.txt
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Error starting Test_NightBuild/job/00_Launcher_ALL on Jenkins. Http response: "
            #   cat outputStart.txt
            #   exit 1
            # fi

            # # Now we need to wait for the new item in Jenkins queue to be processed
            # # search for the new item created Location in the output response
            # # make sure to remove the carriage return that is part of http header response
            # LOCATION=$(grep Location outputStart.txt | awk '{print $NF}' | tr -d '\r')
            # echo "${LOCATION}" | grep --quiet http
            # if [[ $? -ne 0 ]];
            # then
            #   echo "Location in Http response invalid"
            #   cat outputStart.txt
            #   exit 1
            # fi

            # echo "We need to wait for item in Jenkins queue to be processed : ${LOCATION}"
            # ./scripts/jenkins/waitForJob.sh "${LOCATION}" "${USERPW}"

            # echo "Test Started on Jenkins. Go see it at ${{env.JenkinsUrl}}/job/Test_NightBuild"
            # echo "Done"

          else
            echo "Skip Start Jenkins regression"
          fi
