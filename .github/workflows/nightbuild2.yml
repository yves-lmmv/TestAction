# This is a basic workflow to help you get started with Actions

name: BuildRelease2

# Controls when the workflow will run 
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # NOTE : The time is badly set somewhere as it is NOT UTC.
    # This cron run at midnight with 0 4....
    - cron:  '0 4 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      gitRev:
        description: 'git rev or tag to build. default: head of current branch'
        required: false
        default: ''
      debVersion:
        description: 'Version for .deb (ex YYYY.MM.DD), if empty : nightbuild autogenerated name. NOTE : for official release, put the same name here than the tag'
        required: false
        default: ''
      skipAptGet: 
        description: 'skip apt get'
        required: false
        default: ''
      skipCheckout: 
        description: 'skip checkout'
        required: false
        default: ''
      skipBuild: 
        description: 'skip build'
        required: false
        default: ''
      buildOptions:
        description: 'option to pass to buildall script (ex: "--build ltrx")'
        required: false
        default: '-v'
      skipDebian: 
        description: 'skip debian build'
        required: false
        default: ''

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #runs-on: ubuntu-latest
    runs-on: self-hosted
    timeout-minutes: 140

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repo
        run: | 
          if [ -z "${{ github.event.inputs.skipCheckout }}" ]; then
            rm Ltrx-ToolsAndDoc -rf
            git clone --recursive git@github.com:likeMindedLabs/Ltrx-ToolsAndDoc.git
            cd Ltrx-ToolsAndDoc
            GIT_REV="${{ github.event.inputs.gitRev }}"
            if [ "${GIT_REV}" != "" ]; then
              echo "Checkout and update to rev: ${GIT_REV}"
              git checkout "${GIT_REV}"
              git submodule update
              ## if a rev or tag is specified, this means it is not a nightbuild (HEAD)
              ## so we need to set all the meson .wrap file to point to the proper version
              ## of all the current submodules
              echo "Setting all Meson .wrap to current submodules"
              # we skip the step that check if each submodule is up to date vs HEAD.
              # we fix all wrap file to the submodule version in the tree
              ./scripts/git_check.sh --skip-submodules --fix-wrap
            fi
          else
            echo "skip checkout"
          fi
      - name: running script setup_ubuntu.sh (apt get package)
        run: |
          if [ -z "${{ github.event.inputs.skipAptGet }}" ]; then
            sudo ./Ltrx-ToolsAndDoc/scripts/setup_ubuntu.sh
          else
            echo "Skip scripts/setup_ubuntu.sh (apt get)"
          fi
      ## This gitaction didn't seems to work.. lots of error when fetching some submodules. This is why I do it manually above
        # uses: actions/checkout@v2
        # with:
        #   submodules: 'true'
        #   fetch-depth: '0'

      - name: Building LTRX
        run: |
          if [ -z "${{ github.event.inputs.skipBuild }}" ]; then
            export OPTBASE_OVERRIDE=/tmp/opt
            cd Ltrx-ToolsAndDoc
            BUILD_OPTIONS="${{ github.event.inputs.buildOptions }}"
            if [ "${BUILD_OPTIONS}" == "-v" ] || [ "${BUILD_OPTIONS}" == "" ]; then
              echo "Cleaning all previous build since no options set to build"
              rm /tmp/opt -rf
              echo "Doing full build from scratch"
            fi
            export NEXUS_USER=${{ secrets.REPO_USERNAME }}
            export NEXUS_PASSWORD=${{ secrets.REPO_PASSWORD }}
            ./scripts/buildall.sh ${BUILD_OPTIONS}
          else
            echo "skip ALL the build"
          fi
          
      - name: Release .deb LTRX
        run: |
          if [ -z "${{ github.event.inputs.skipDebian }}" ]; then
            export OPTBASE_OVERRIDE=/tmp/opt
            cd Ltrx-ToolsAndDoc
            DEB_NAME="${{ github.event.inputs.debVersion }}"
            if [ "${DEB_NAME}" == "" ]; then
              DEB_NAME=$(./scripts/generate_build_name.sh)
            fi
            echo "Cleaning all previous distro/ltrx"
            rm /tmp/distro/ltrx -rf
            echo "Building debian version=${DEB_NAME}"
            ./scripts/release_ltrx_deb.sh --skip-date-check --version "${DEB_NAME}" --distro /tmp/distro/ltrx | tee logs/release_ltrx_deb.log
          else
            echo "Skip Release .deb"
          fi

      - name: Copy .deb LTRX to permanent storage
        run: |
          if [ -z "${{ github.event.inputs.skipDebian }}" ]; then
            export OPTBASE_OVERRIDE=/tmp/opt
            cd Ltrx-ToolsAndDoc
            DEB_LOCATION=$(grep "dpkg-deb: building" logs/release_ltrx_deb.log  | awk '{ print $6 }' | sed "s/'/ /g" | awk '{ print $1 }')
            echo "copying ${DEB_LOCATION}"
            # is this a nightbuild or normal build ?
            PATH_END="/"
            if [ "${{ github.event.inputs.debVersion }}" == "" ]; then
              PATH_END="/Nightbuild/"
            fi
            #https://nexus.vantrix.tv/repository/deb/x86_64/ltrx/${PATH_END}
            # curl didn't like reading from /tmp
            cp "${DEB_LOCATION}" .
            DEB_FILE=$(basename ${DEB_LOCATION})
            curl --fail -u ${{ secrets.REPO_USERNAME }}:${{ secrets.REPO_PASSWORD }} --upload-file "${DEB_FILE}" "https://nexus.vantrix.tv/repository/raw/dev/apt/ltrx${PATH_END}${DEB_FILE}"
          else
            echo "Skip copy .deb"
          fi
